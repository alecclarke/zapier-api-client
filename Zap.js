// Generated by CoffeeScript 1.7.1
(function() {
  ({
    build_request: function(bundle, url, method, data) {
      return {
        url: url,
        headers: {
          "Content-Type": "application/json; charset=utf-8",
          Accept: "application/json",
          Authorization: bundle.request.headers.Authorization
        },
        method: method,
        data: data
      };
    },
    check_custom_fields_post_poll: function(bundle) {
      var array, i, results;
      array = [];
      results = JSON.parse(bundle.response.content);
      i = 0;
      while (i < results.custom_fields.length) {
        if ((results.custom_fields[i].field_type !== "contact") && (results.custom_fields[i].field_type !== "matter") && (results.custom_fields[i].parent_type === "Contact")) {
          array.push(results.custom_fields[i]);
        }
        i++;
      }
      return array;
    },
    check_matter_custom_fields_post_poll: function(bundle) {
      var array, i, results;
      array = [];
      results = JSON.parse(bundle.response.content);
      i = 0;
      while (i < results.custom_fields.length) {
        if ((results.custom_fields[i].field_type !== "contact") && (results.custom_fields[i].field_type !== "matter") && (results.custom_fields[i].parent_type === "Matter")) {
          array.push(results.custom_fields[i]);
        }
        i++;
      }
      return array;
    },
    contact_note_pre_write: function(bundle) {
      var contact, contact_id, create_response, data, outbound, response;
      outbound = JSON.parse(bundle.request.data);
      response = Zap.make_get_request(bundle, "https://app.goclio.com/api/v2/contacts?query=" + outbound.notes.email);
      contact_id = void 0;
      if (response.contacts.length < 1) {
        data = bundle.action_fields;
        contact = JSON.stringify({
          contact: {
            type: "Person",
            name: data.notes.name,
            first_name: data.notes.name.split(" ")[0],
            last_name: data.notes.name.split(" ")[1],
            email_addresses: [
              {
                name: "Work",
                address: data.notes.email
              }
            ]
          }
        });
        create_response = Zap.make_post_request(bundle, "https://app.goclio.com/api/v2/contacts", contact);
        contact_id = create_response.contact.id;
      } else {
        contact_id = response.contacts[0].id;
      }
      outbound = {
        note: {
          subject: outbound.notes.subject,
          detail: outbound.notes.detail,
          regarding: {
            type: "Contact",
            id: contact_id
          }
        }
      };
      bundle.request.data = JSON.stringify(outbound);
      return {
        url: bundle.request.url,
        method: bundle.request.method,
        auth: bundle.request.auth,
        headers: bundle.request.headers,
        params: bundle.request.params,
        data: bundle.request.data
      };
    },
    create_calendar_entry_pre_write: function(bundle) {
      var outbound;
      outbound = JSON.parse(bundle.request.data);
      _.defaults(outbound.calendar_entry, {
        description: null,
        location: null,
        matter: {
          id: null
        },
        reminders: {
          unit: null,
          amount: null
        },
        activities: {
          id: null
        }
      });
      switch (outbound.calendar_entry.reminders.unit) {
        case "Hours":
          outbound.calendar_entry.reminders.amount = outbound.calendar_entry.reminders.amount * 60;
          break;
        case "Days":
          outbound.calendar_entry.reminders.amount = outbound.calendar_entry.reminders.amount * 1440;
          break;
        case "Weeks":
          outbound.calendar_entry.reminders.amount = outbound.calendar_entry.reminders.amount * 10080;
      }
      outbound.calendar_entry.reminders = [
        {
          minutes: outbound.calendar_entry.reminders.amount,
          method: "Popup"
        }
      ];
      bundle.request.data = JSON.stringify(outbound);
      return {
        url: bundle.request.url,
        method: bundle.request.method,
        auth: bundle.request.auth,
        headers: bundle.request.headers,
        params: bundle.request.params,
        data: bundle.request.data
      };
    },
    create_communication_pre_write: function(bundle) {
      var contact_response, outbound, receiver_data, receiver_id, receiver_type, sender_data, sender_id, sender_type, user_response;
      outbound = JSON.parse(bundle.request.data);
      sender_type = void 0;
      sender_id = null;
      receiver_type = void 0;
      receiver_id = null;
      user_response = Zap.make_get_request(bundle, "https://app.goclio.com/api/v2/users?query=" + outbound.communication.email_receiver);
      if (user_response.users.length > 0) {
        receiver_id = user_response.users[0].id;
        receiver_type = "User";
      }
      contact_response = Zap.make_get_request(bundle, "https://app.goclio.com/api/v2/contacts?query=" + outbound.communication.email_receiver);
      if (contact_response.contacts.length > 0) {
        receiver_id = contact_response.contacts[0].id;
        receiver_type = "Contact";
      }
      if (receiver_id === null) {
        receiver_data = JSON.stringify({
          contact: {
            type: "Person",
            name: outbound.communication.receiver_name,
            first_name: outbound.communication.receiver_name.split(" ")[0],
            last_name: outbound.communication.receiver_name.split(" ")[1],
            email_addresses: [
              {
                name: "Work",
                address: outbound.communication.email_receiver
              }
            ]
          }
        });
        contact_response = Zap.make_post_request(bundle, "https://app.goclio.com/api/v2/contacts", receiver_data);
        receiver_id = contact_response.contact.id;
        receiver_type = "Contact";
      }
      user_response = Zap.make_get_request(bundle, "https://app.goclio.com/api/v2/users?query=" + outbound.communication.email_sender);
      if (user_response.users.length > 0) {
        sender_id = user_response.users[0].id;
        sender_type = "User";
      }
      contact_response = Zap.make_get_request(bundle, "https://app.goclio.com/api/v2/contacts?query=" + outbound.communication.email_sender);
      if (contact_response.contacts.length > 0) {
        sender_id = contact_response.contacts[0].id;
        sender_type = "Contact";
      }
      if (sender_id === null) {
        sender_data = JSON.stringify({
          contact: {
            type: "Person",
            name: outbound.communication.sender_name,
            first_name: outbound.communication.sender_name.split(" ")[0],
            last_name: outbound.communication.sender_name.split(" ")[1],
            email_addresses: [
              {
                name: "Work",
                address: outbound.communication.email_sender
              }
            ]
          }
        });
        contact_response = Zap.make_post_request(bundle, "https://app.goclio.com/api/v2/contacts", sender_data);
        sender_id = contact_response.contact.id;
        sender_type = "Contact";
      }
      _.defaults(outbound.communication, {
        subject: null,
        body: null,
        matter: {
          id: null
        }
      });
      outbound = {
        communication: {
          type: "EmailCommunication",
          subject: outbound.communication.subject,
          body: outbound.communication.body,
          matter: {
            id: outbound.communication.matter.id
          },
          senders: [
            {
              id: sender_id,
              type: sender_type
            }
          ],
          receivers: [
            {
              id: receiver_id,
              type: receiver_type
            }
          ]
        }
      };
      bundle.request.data = JSON.stringify(outbound);
      return {
        url: bundle.request.url,
        method: bundle.request.method,
        auth: bundle.request.auth,
        headers: bundle.request.headers,
        params: bundle.request.params,
        data: bundle.request.data
      };
    },
    create_company_contact_post_custom_action_fields: function(bundle) {
      var result, type;
      result = JSON.parse(bundle.response.content);
      type = void 0;
      switch (result.custom_field.field_type) {
        case "checkbox":
          type = "bool";
          break;
        case "time":
          type = "unicode";
          break;
        case "email":
          type = "unicode";
          break;
        case "numeric":
          type = "int";
          break;
        case "text_area":
          type = "text";
          break;
        case "currency":
          type = "int";
          break;
        case "date":
          type = "datetime";
          break;
        case "url":
          type = "unicode";
          break;
        case "text_line":
          type = "unicode";
      }
      return [
        {
          type: type,
          key: "contact__custom_field_values__value",
          required: false,
          label: JSON.stringify(result.custom_field.name),
          help_text: "Enter a/an " + result.custom_field.field_type + " value"
        }
      ];
    },
    create_company_contact_pre_custom_action_fields: function(bundle) {
      bundle.request.url = bundle.request.url + "/" + bundle.action_fields.contact__custom_field_values__id;
      return bundle.request;
    },
    create_company_contact_pre_write: function(bundle) {
      var outbound;
      outbound = JSON.parse(bundle.request.data);
      _.defaults(outbound.contact, {
        phone_numbers: {
          name: null,
          number: null
        },
        addresses: {
          name: null,
          street: null,
          city: null,
          province: null,
          postal_code: null,
          country: null
        },
        web_sites: {
          name: null,
          address: null
        },
        instant_messengers: {
          name: null,
          address: null
        }
      });
      outbound.contact.type = "Company";
      outbound.contact.phone_numbers = [
        {
          name: outbound.contact.phone_numbers.name,
          number: outbound.contact.phone_numbers.number
        }
      ];
      if (typeof outbound.contact.email_addresses !== "undefined") {
        _.defaults(outbound.contact.email_addresses, {
          name: null,
          address: null
        });
        if (outbound.contact.email_addresses.address === null) {
          outbound.contact.email_addresses.address = [];
        } else {
          outbound.contact.email_addresses = [
            {
              name: outbound.contact.email_addresses.name,
              address: outbound.contact.email_addresses.address
            }
          ];
        }
      }
      outbound.contact.addresses = [
        {
          name: outbound.contact.addresses.name,
          street: outbound.contact.addresses.street,
          city: outbound.contact.addresses.city,
          province: outbound.contact.addresses.province,
          postal_code: outbound.contact.addresses.postal_code,
          country: outbound.contact.addresses.country
        }
      ];
      outbound.contact.web_sites = [
        {
          name: outbound.contact.web_sites.name,
          address: outbound.contact.web_sites.address
        }
      ];
      outbound.contact.instant_messengers = [
        {
          name: outbound.contact.instant_messengers.name,
          address: outbound.contact.instant_messengers.address
        }
      ];
      if (typeof outbound.contact.custom_field_values !== "undefined") {
        _.defaults(outbound.contact.custom_field_values, {
          id: null,
          value: null
        });
        if ((outbound.contact.custom_field_values.id === null) || (outbound.contact.custom_field_values.value === null)) {
          outbound.contact.custom_field_values = [];
        } else {
          outbound.contact.custom_field_values = [
            {
              custom_field: {
                id: outbound.contact.custom_field_values.id
              },
              value: outbound.contact.custom_field_values.value
            }
          ];
        }
      }
      if (typeof outbound.contact.activity_rates !== "undefined") {
        _.defaults(outbound.contact.activity_rates, {
          user: null,
          rate: null,
          flat_rate: null
        });
        if ((outbound.contact.activity_rates.user === null) || (outbound.contact.activity_rates.rate === null) || (outbound.activity_rates.flat_rate === null)) {
          outbound.contact.activity_rates = [];
        } else {
          outbound.contact.activity_rates = [
            {
              user: {
                id: outbound.contact.activity_rates.user
              },
              rate: outbound.contact.activity_rates.rate,
              flat_rate: outbound.contact.activity_rates.flat_rate
            }
          ];
        }
      }
      bundle.request.data = JSON.stringify(outbound);
      return bundle.request;
    },
    create_matter_pre_custom_action_fields: function(bundle) {
      bundle.request.url = bundle.request.url + "/" + bundle.action_fields.matter__custom_field_values__custom_field__id;
      return bundle.request;
    },
    create_matter_post_custom_action_fields: function(bundle) {
      var result, type;
      result = JSON.parse(bundle.response.content);
      type = void 0;
      switch (result.custom_field.field_type) {
        case "checkbox":
          type = "bool";
          break;
        case "time":
          type = "unicode";
          break;
        case "email":
          type = "unicode";
          break;
        case "numeric":
          type = "int";
          break;
        case "text_area":
          type = "text";
          break;
        case "currency":
          type = "int";
          break;
        case "date":
          type = "datetime";
          break;
        case "url":
          type = "unicode";
          break;
        case "text_line":
          type = "unicode";
      }
      return [
        {
          type: type,
          key: "matter__custom_field_values__value",
          required: false,
          label: JSON.stringify(result.custom_field.name),
          help_text: "Enter a/an " + result.custom_field.field_type + " value"
        }
      ];
    },
    create_matter_pre_write: function(bundle) {
      var outbound;
      outbound = JSON.parse(bundle.request.data);
      _.defaults(outbound.matter, {
        billable: null,
        location: null,
        custom_field_values: {
          value: null,
          custom_field: {
            id: null
          }
        }
      });
      if ((outbound.matter.custom_field_values.value === null) || (outbound.matter.custom_field_values.custom_field.id === null)) {
        outbound.matter.custom_field_values = [];
      } else {
        outbound.matter.custom_field_values = [
          {
            custom_field: {
              id: outbound.matter.custom_field_values.custom_field.id
            },
            value: outbound.matter.custom_field_values.value
          }
        ];
      }
      outbound.matter.status = "Open";
      bundle.request.data = JSON.stringify(outbound);
      return {
        url: bundle.request.url,
        method: bundle.request.method,
        auth: bundle.request.auth,
        headers: bundle.request.headers,
        params: bundle.request.params,
        data: bundle.request.data
      };
    },
    create_person_contact_pre_custom_action_fields: function(bundle) {
      bundle.request.url = bundle.request.url + "/" + bundle.action_fields.contact__custom_field_values__id;
      return bundle.request;
    },
    create_person_contact_post_custom_action_fields: function(bundle) {
      var result, type;
      result = JSON.parse(bundle.response.content);
      type = void 0;
      switch (result.custom_field.field_type) {
        case "checkbox":
          type = "bool";
          break;
        case "time":
          type = "unicode";
          break;
        case "email":
          type = "unicode";
          break;
        case "numeric":
          type = "int";
          break;
        case "text_area":
          type = "text";
          break;
        case "currency":
          type = "int";
          break;
        case "date":
          type = "datetime";
          break;
        case "url":
          type = "unicode";
          break;
        case "text_line":
          type = "unicode";
      }
      return [
        {
          type: type,
          key: "contact__custom_field_values__value",
          required: false,
          label: JSON.stringify(result.custom_field.name),
          help_text: "Enter a/an " + result.custom_field.field_type + " value"
        }
      ];
    },
    create_person_contact_pre_write: function(bundle) {
      var outbound;
      outbound = JSON.parse(bundle.request.data);
      _.defaults(outbound.contact, {
        phone_numbers: {
          name: null,
          number: null
        },
        addresses: {
          name: null,
          street: null,
          city: null,
          province: null,
          postal_code: null,
          country: null
        },
        web_sites: {
          name: null,
          address: null
        },
        instant_messengers: {
          name: null,
          address: null
        }
      });
      outbound.contact.type = "Person";
      outbound.contact.phone_numbers = [
        {
          name: outbound.contact.phone_numbers.name,
          number: outbound.contact.phone_numbers.number
        }
      ];
      if (typeof outbound.contact.email_addresses !== "undefined") {
        _.defaults(outbound.contact.email_addresses, {
          name: null,
          address: null
        });
        if (outbound.contact.email_addresses.address === null) {
          outbound.contact.email_addresses = [];
        } else {
          outbound.contact.email_addresses = [
            {
              name: outbound.contact.email_addresses.name,
              address: outbound.contact.email_addresses.address
            }
          ];
        }
      }
      outbound.contact.addresses = [
        {
          name: outbound.contact.addresses.name,
          street: outbound.contact.addresses.street,
          city: outbound.contact.addresses.city,
          province: outbound.contact.addresses.province,
          postal_code: outbound.contact.addresses.postal_code,
          country: outbound.contact.addresses.country
        }
      ];
      outbound.contact.web_sites = [
        {
          name: outbound.contact.web_sites.name,
          address: outbound.contact.web_sites.address
        }
      ];
      outbound.contact.instant_messengers = [
        {
          name: outbound.contact.instant_messengers.name,
          address: outbound.contact.instant_messengers.address
        }
      ];
      if (typeof outbound.contact.custom_field_values !== "undefined") {
        _.defaults(outbound.contact.custom_field_values, {
          id: null,
          value: null
        });
        if ((outbound.contact.custom_field_values.id === null) || (outbound.contact.custom_field_values.value === null)) {
          outbound.contact.custom_field_values = [];
        } else {
          outbound.contact.custom_field_values = [
            {
              custom_field: {
                id: outbound.contact.custom_field_values.id
              },
              value: outbound.contact.custom_field_values.value
            }
          ];
        }
      }
      if (typeof outbound.contact.activity_rates !== "undefined") {
        _.defaults(outbound.contact.activity_rates, {
          user: null,
          rate: null,
          flat_rate: null
        });
        if ((outbound.contact.activity_rates.user === null) || (outbound.contact.activity_rates.rate === null) || (outbound.contact.activity_rates.flat_rate === null)) {
          outbound.contact.activity_rates = [];
        } else {
          outbound.contact.activity_rates = [
            {
              user: {
                id: outbound.contact.activity_rates.user
              },
              rate: outbound.contact.activity_rates.rate,
              flat_rate: outbound.contact.activity_rates.flat_rate
            }
          ];
        }
      }
      bundle.request.data = JSON.stringify(outbound);
      return bundle.request;
    },
    create_task_pre_write: function(bundle) {
      var outbound, reminderAmount, reminderTimeUnit;
      outbound = JSON.parse(bundle.request.data);
      _.defaults(outbound.task, {
        reminders: {
          unit: null,
          amount: null
        }
      });
      reminderTimeUnit = outbound.task.reminders.unit;
      reminderAmount = outbound.task.reminders.amount;
      switch (reminderTimeUnit) {
        case "Hours":
          reminderAmount = reminderAmount * 60;
          break;
        case "Days":
          reminderAmount = reminderAmount * 1440;
          break;
        case "Weeks":
          reminderAmount = reminderAmount * 10080;
      }
      outbound.task.reminders = [
        {
          minutes: reminderAmount,
          method: "Popup"
        }
      ];
      bundle.request.data = JSON.stringify(outbound);
      return bundle.request;
    },
    make_get_request: function(bundle, url) {
      return JSON.parse(z.request(Zap.build_request(bundle, url, "GET", null)).content);
    },
    make_post_request: function(bundle, url, data) {
      return JSON.parse(z.request(Zap.build_request(bundle, url, "POST", data)).content);
    },
    new_contact_post_poll: function(bundle) {
      var array, i, results;
      results = JSON.parse(bundle.response.content);
      i = 0;
      array = [];
      while (i < results.contacts.length) {
        if (results.contacts.length < 1) {
          results.contacts[i].first_name = null;
          results.contacts[i].last_name = null;
          results.contacts[i].name = null;
          results.contacts[i].title = null;
          results.contacts[i].addresses[0] = null;
          results.contacts[i].email_addresses[0] = null;
          results.contacts[i].instant_messengers[0] = null;
          results.contacts[i].web_sites[0] = null;
          results.contacts[i].custom_field_values[0] = null;
        }
        if (results.contacts[i].addresses.length < 1) {
          results.contacts[i].addresses.push({
            street: null,
            city: null,
            province: null,
            postal_code: null,
            country: null
          });
        }
        if (results.contacts[i].phone_numbers.length < 1) {
          results.contacts[i].phone_numbers[0] = {
            number: null
          };
        }
        if (results.contacts[i].email_addresses.length < 1) {
          results.contacts[i].email_addresses[0] = {
            address: null
          };
        }
        if (results.contacts[i].instant_messengers.length < 1) {
          results.contacts[i].instant_messengers[0] = {
            address: null
          };
        }
        if (results.contacts[i].web_sites.length < 1) {
          results.contacts[i].web_sites[0] = {
            address: null
          };
        }
        if (results.contacts[i].custom_field_values.length < 1) {
          results.contacts[i].custom_field_values[0] = {
            type: null,
            value: null,
            custom_field: {
              name: null
            },
            matter: {
              name: null
            }
          };
        }
        if (typeof results.contacts[i].custom_field_values[0].matter === "undefined") {
          results.contacts[i].custom_field_values[0].matter = {
            name: null
          };
        }
        array.push({
          id: results.contacts[i].id,
          title: results.contacts[i].title,
          full_name: results.contacts[i].name,
          first_name: results.contacts[i].first_name,
          last_name: results.contacts[i].last_name,
          phone_number: results.contacts[i].phone_numbers[0].number,
          email: results.contacts[i].email_addresses[0].address,
          street: results.contacts[i].addresses[0].street,
          city: results.contacts[i].addresses[0].city,
          province: results.contacts[i].addresses[0].province,
          postal_code: results.contacts[i].addresses[0].postal_code,
          country: results.contacts[i].addresses[0].country,
          instant_messenger: results.contacts[i].instant_messengers[0].address,
          web_site: results.contacts[i].web_sites[0].address,
          matter: results.contacts[i].custom_field_values[0].matter.name,
          custom_field_name: results.contacts[i].custom_field_values[0].custom_field.name
        });
        i++;
      }
      return array.reverse();
    },
    new_task_post_poll: function(bundle) {
      var results;
      results = JSON.parse(bundle.response.content);
      return results.tasks.reverse();
    }
  });

}).call(this);
